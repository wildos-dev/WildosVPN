#!/usr/bin/env bash
set -e

# ===============================================================================
# WildosVPN Install Script v5.0 - Production Security Edition
# –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–Ω–µ–ª–∏ WildosVPN —Å –ø—Ä–æ–¥–∞–∫—à–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
# 
# –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
# - –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
# - –û—Ç–∫–ª—é—á–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º–µ
# - Caddy –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –¥–æ–º–µ–Ω–æ–≤
# ===============================================================================

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SCRIPT_VERSION="5.1.0"
REPO_URL="https://github.com/wildos-dev/WildosVPN"
REPO_BRANCH="main"
INSTALL_DIR="/opt"
APP_NAME="wildosvpn"
APP_DIR="$INSTALL_DIR/$APP_NAME"
DATA_DIR="/var/lib/$APP_NAME"
LOG_FILE="/var/log/wildosvpn_install.log"
LAST_XRAY_CORES=10

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PANEL_DOMAIN=""
SUBSCRIPTION_DOMAIN=""
DASHBOARD_PATH="/admin/"
SUDO_USERNAME="admin"
SUDO_PASSWORD=""
UPDATE_MODE=false

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
PRODUCTION_MODE=false
ENABLE_SSL_CERTIFICATES=true
ENABLE_NODE_AUTHENTICATION=true
ENABLE_FIREWALL_SETUP=false
ENABLE_SECURITY_MONITORING=true
AUTO_GENERATE_CERTIFICATES=true

# ===============================================================================
# –¶–í–ï–¢–ù–û–ô –í–´–í–û–î –ò –£–¢–ò–õ–ò–¢–´
# ===============================================================================

colorized_echo() {
    local color=$1
    local text=$2
    case $color in
        "red") printf "\e[91m${text}\e[0m\n";;
        "green") printf "\e[92m${text}\e[0m\n";;
        "yellow") printf "\e[93m${text}\e[0m\n";;
        "blue") printf "\e[94m${text}\e[0m\n";;
        "magenta") printf "\e[95m${text}\e[0m\n";;
        "cyan") printf "\e[96m${text}\e[0m\n";;
        "white") printf "\e[97m${text}\e[0m\n";;
        *) echo "${text}";;
    esac
}

print_step() {
    colorized_echo blue "‚è≥ $1"
}

print_ok() {
    colorized_echo green "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
}

print_fail() {
    colorized_echo red "‚ùå –û—à–∏–±–∫–∞"
}

print_success() {
    colorized_echo green "üéâ $1"
}

print_error() {
    colorized_echo red "‚ùå $1"
}

print_info() {
    colorized_echo cyan "‚ÑπÔ∏è  $1"
}

print_warning() {
    colorized_echo yellow "‚ö†Ô∏è  $1"
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_action() {
    local message="$1"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $message" | tee -a "$LOG_FILE"
}

error_exit() {
    print_error "$1"
    log_action "ERROR: $1"
    exit 1
}

# ===============================================================================
# –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–û–í–ï–†–ö–ò
# ===============================================================================

check_root() {
    if [ "$(id -u)" != "0" ]; then
        error_exit "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –æ—Ç –∏–º–µ–Ω–∏ root"
    fi
}

detect_os() {
    if [ -f /etc/lsb-release ]; then
        OS=$(lsb_release -si 2>/dev/null)
    elif [ -f /etc/os-release ]; then
        OS=$(awk -F= '/^NAME/{print $2}' /etc/os-release | tr -d '"')
    elif [ -f /etc/redhat-release ]; then
        OS=$(cat /etc/redhat-release | awk '{print $1}')
    elif [ -f /etc/arch-release ]; then
        OS="Arch"
    else
        error_exit "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"
    fi
    
    log_action "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: $OS"
}

detect_arch() {
    case "$(uname -m)" in
        'i386' | 'i686') ARCH='32';;
        'amd64' | 'x86_64') ARCH='64';;
        'armv5tel') ARCH='arm32-v5';;
        'armv6l') ARCH='arm32-v6';;
        'armv7' | 'armv7l') ARCH='arm32-v7a';;
        'armv8' | 'aarch64') ARCH='arm64-v8a';;
        *) error_exit "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $(uname -m)";;
    esac
    
    log_action "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: $ARCH"
}

check_network() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
    
    local test_urls=(
        "https://github.com"
        "https://api.github.com"
        "https://get.docker.com"
    )
    
    for url in "${test_urls[@]}"; do
        if ! curl -s --connect-timeout 10 --max-time 30 "$url" >/dev/null; then
            print_fail
            error_exit "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ $url"
        fi
    done
    print_ok
}

check_docker() {
    if ! command -v docker >/dev/null 2>&1; then
        return 1
    fi
    
    if ! docker compose version >/dev/null 2>&1; then
        return 1
    fi
    
    return 0
}

# ===============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –†–ï–ñ–ò–ú–ê –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø
# ===============================================================================

setup_deployment_mode() {
    clear
    echo
    colorized_echo cyan "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    colorized_echo cyan "                    –†–ï–ñ–ò–ú –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø"
    colorized_echo cyan "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo
    
    colorized_echo yellow "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è WildosVPN:"
    echo
    colorized_echo white "1) üß™ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞/–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    colorized_echo white "   ‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π"
    colorized_echo white "   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    colorized_echo white "   ‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
    echo
    colorized_echo white "2) üöÄ –ü—Ä–æ–¥–∞–∫—à–µ–Ω (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
    colorized_echo white "   ‚Ä¢ –ü–æ–ª–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"
    colorized_echo white "   ‚Ä¢ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ"
    colorized_echo white "   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    colorized_echo white "   ‚Ä¢ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É–∑–ª–æ–≤"
    echo
    
    while true; do
        read -p "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1/2, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2): " mode_choice
        mode_choice=${mode_choice:-2}
        
        case $mode_choice in
            1)
                PRODUCTION_MODE=false
                ENABLE_SSL_CERTIFICATES=false
                ENABLE_NODE_AUTHENTICATION=false
                ENABLE_FIREWALL_SETUP=false
                ENABLE_SECURITY_MONITORING=false
                print_info "–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
                break
                ;;
            2)
                PRODUCTION_MODE=true
                ENABLE_SSL_CERTIFICATES=true
                ENABLE_NODE_AUTHENTICATION=true
                ENABLE_FIREWALL_SETUP=false
                ENABLE_SECURITY_MONITORING=true
                print_success "–í—ã–±—Ä–∞–Ω –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º"
                break
                ;;
            *)
                print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2"
                ;;
        esac
    done
    
    log_action "–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: $([ "$PRODUCTION_MODE" = true ] && echo '–ü—Ä–æ–¥–∞–∫—à–µ–Ω' || echo '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞')"
}

# ===============================================================================
# –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
# ===============================================================================

detect_package_manager() {
    if [[ "$OS" == *"Ubuntu"* ]] || [[ "$OS" == *"Debian"* ]]; then
        PKG_MANAGER="apt-get"
        PKG_UPDATE="$PKG_MANAGER update"
        PKG_INSTALL="$PKG_MANAGER install -y"
    elif [[ "$OS" == *"CentOS"* ]] || [[ "$OS" == *"AlmaLinux"* ]] || [[ "$OS" == *"Rocky"* ]]; then
        PKG_MANAGER="yum"
        PKG_UPDATE="$PKG_MANAGER update -y && $PKG_MANAGER install -y epel-release"
        PKG_INSTALL="$PKG_MANAGER install -y"
    elif [[ "$OS" == *"Fedora"* ]]; then
        PKG_MANAGER="dnf"
        PKG_UPDATE="$PKG_MANAGER update -y"
        PKG_INSTALL="$PKG_MANAGER install -y"
    elif [ "$OS" == "Arch" ]; then
        PKG_MANAGER="pacman"
        PKG_UPDATE="$PKG_MANAGER -Sy"
        PKG_INSTALL="$PKG_MANAGER -S --noconfirm"
    else
        error_exit "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: $OS"
    fi
}

install_dependencies() {
    print_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    
    detect_package_manager
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ APT –¥–ª—è Ubuntu/Debian
    if [[ "$OS" == *"Ubuntu"* ]] || [[ "$OS" == *"Debian"* ]]; then
        export DEBIAN_FRONTEND=noninteractive
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ APT (–º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥)
        local timeout=60
        local count=0
        while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do
            if [ $count -ge $timeout ]; then
                print_warning "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ APT"
                killall apt apt-get 2>/dev/null || true
                rm -f /var/lib/apt/lists/lock /var/cache/apt/archives/lock /var/lib/dpkg/lock* 2>/dev/null || true
                dpkg --configure -a 2>/dev/null || true
                break
            fi
            echo -n "."
            sleep 1
            ((count++))
        done
        [ $count -gt 0 ] && echo
    fi
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Å timeout –∏ –ø–æ–∫–∞–∑–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    print_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤..."
    if [[ "$OS" == *"Ubuntu"* ]] || [[ "$OS" == *"Debian"* ]]; then
        timeout 180 apt-get update || print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
    elif [[ "$OS" == *"CentOS"* ]] || [[ "$OS" == *"AlmaLinux"* ]] || [[ "$OS" == *"Rocky"* ]]; then
        timeout 180 yum update -y || print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
        timeout 120 yum install -y epel-release || true
    elif [[ "$OS" == *"Fedora"* ]]; then
        timeout 180 dnf update -y || print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
    elif [ "$OS" == "Arch" ]; then
        timeout 180 pacman -Sy || print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
    fi
    
    local packages=(
        "curl"
        "wget"
        "git"
        "unzip"
        "openssl"
        "jq"
        "cron"
        "dnsutils"
    )
    
    # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    if [ "$PRODUCTION_MODE" = true ]; then
        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        :
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É —Å –ø–æ–∫–∞–∑–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤:"
    for package in "${packages[@]}"; do
        echo -n "  - $package: "
        if timeout 120 eval $PKG_INSTALL "$package" >/dev/null 2>&1; then
            echo "‚úÖ"
        else
            echo "‚ùå (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)"
        fi
    done
    
    print_ok
}

install_docker() {
    if check_docker; then
        print_info "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return
    fi
    
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker"
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
    curl -fsSL https://get.docker.com | sh >/dev/null 2>&1
    
    # –ó–∞–ø—É—Å–∫ –∏ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞
    systemctl start docker
    systemctl enable docker
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    if ! check_docker; then
        error_exit "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker"
    fi
    
    print_ok
}

# ===============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
# ===============================================================================

setup_ssl_certificates() {
    if [ "$ENABLE_SSL_CERTIFICATES" != true ]; then
        return
    fi
    
    print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è SSL
    mkdir -p "$DATA_DIR/ssl"
    chmod 700 "$DATA_DIR/ssl"
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏
    if [ ! -f "$DATA_DIR/ssl/ca.key" ]; then
        openssl genrsa -out "$DATA_DIR/ssl/ca.key" 4096 2>/dev/null
        openssl req -new -x509 -days 3650 -key "$DATA_DIR/ssl/ca.key" \
            -out "$DATA_DIR/ssl/ca.cert" \
            -subj "/C=US/ST=State/L=City/O=WildosVPN/CN=WildosVPN-CA" 2>/dev/null
        
        chmod 600 "$DATA_DIR/ssl/ca.key"
        chmod 644 "$DATA_DIR/ssl/ca.cert"
    fi
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏
    if [ ! -f "$DATA_DIR/ssl/panel.key" ]; then
        openssl genrsa -out "$DATA_DIR/ssl/panel.key" 2048 2>/dev/null
        openssl req -new -key "$DATA_DIR/ssl/panel.key" \
            -out "$DATA_DIR/ssl/panel.csr" \
            -subj "/C=US/ST=State/L=City/O=WildosVPN/CN=$PANEL_DOMAIN" 2>/dev/null
        
        openssl x509 -req -in "$DATA_DIR/ssl/panel.csr" \
            -CA "$DATA_DIR/ssl/ca.cert" -CAkey "$DATA_DIR/ssl/ca.key" \
            -CAcreateserial -out "$DATA_DIR/ssl/panel.cert" \
            -days 365 2>/dev/null
        
        rm "$DATA_DIR/ssl/panel.csr"
        chmod 600 "$DATA_DIR/ssl/panel.key"
        chmod 644 "$DATA_DIR/ssl/panel.cert"
    fi
    
    print_ok
    log_action "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"
}

setup_node_authentication() {
    if [ "$ENABLE_NODE_AUTHENTICATION" != true ]; then
        return
    fi
    
    print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É–∑–ª–æ–≤"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
    if [ ! -f "$DATA_DIR/node_auth_secret.key" ]; then
        openssl rand -hex 32 > "$DATA_DIR/node_auth_secret.key"
        chmod 600 "$DATA_DIR/node_auth_secret.key"
    fi
    
    print_ok
    log_action "–°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É–∑–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
}


setup_security_monitoring() {
    if [ "$ENABLE_SECURITY_MONITORING" != true ]; then
        return
    fi
    
    print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    mkdir -p "$DATA_DIR/logs/security"
    chmod 755 "$DATA_DIR/logs/security"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ logrotate –¥–ª—è –ª–æ–≥–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    cat > /etc/logrotate.d/wildosvpn-security << EOF
$DATA_DIR/logs/security/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    copytruncate
    create 644 root root
}
EOF
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ fail2ban –¥–ª—è WildosVPN
    if command -v fail2ban-server >/dev/null 2>&1; then
        cat > /etc/fail2ban/jail.d/wildosvpn.conf << EOF
[wildosvpn-auth]
enabled = true
port = 80,443,8000
filter = wildosvpn-auth
logpath = $DATA_DIR/logs/security/*.log
maxretry = 5
bantime = 3600
findtime = 600
EOF
        
        cat > /etc/fail2ban/filter.d/wildosvpn-auth.conf << EOF
[Definition]
failregex = ^.*Failed authentication.*<HOST>.*$
            ^.*Invalid token.*<HOST>.*$
            ^.*Authentication error.*<HOST>.*$
ignoreregex =
EOF
        
        systemctl restart fail2ban 2>/dev/null || true
    fi
    
    print_ok
    log_action "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# ===============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –î–û–ú–ï–ù–´
# ===============================================================================

# –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –∑–∞–ø–∏—Å–µ–π –¥–æ–º–µ–Ω–∞
check_domain_dns() {
    local domain="$1"
    local domain_type="$2"  # "–ø–∞–Ω–µ–ª–∏" –∏–ª–∏ "–ø–æ–¥–ø–∏—Å–æ–∫"
    
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–æ–º–µ–Ω–∞ $domain_type"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π IP —Å–µ—Ä–≤–µ—Ä–∞
    local server_ip=""
    server_ip=$(curl -s --connect-timeout 5 --max-time 10 https://api.ipify.org 2>/dev/null || curl -s --connect-timeout 5 --max-time 10 http://ifconfig.me 2>/dev/null)
    
    if [[ -z "$server_ip" ]]; then
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞"
        return 1
    fi
    
    print_info "IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: $server_ip"
    
    # –†–µ–∑–æ–ª–≤–∏–º –¥–æ–º–µ–Ω
    local domain_ip=""
    if command -v dig >/dev/null 2>&1; then
        domain_ip=$(dig +short "$domain" A 2>/dev/null | head -1)
    elif command -v nslookup >/dev/null 2>&1; then
        domain_ip=$(nslookup "$domain" 2>/dev/null | awk '/^Address: / { print $2 }' | grep -v '#' | head -1)
    elif command -v host >/dev/null 2>&1; then
        domain_ip=$(host "$domain" 2>/dev/null | awk '/has address/ { print $4 }' | head -1)
    else
        print_warning "–ö–æ–º–∞–Ω–¥—ã dig/nslookup/host –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É DNS."
        return 1
    fi
    
    if [[ -z "$domain_ip" ]]; then
        print_fail
        print_error "‚ùå –î–æ–º–µ–Ω $domain –Ω–µ —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è!"
        print_warning "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:"
        print_warning "- DNS –∑–∞–ø–∏—Å—å —Ç–∏–ø–∞ A –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è $domain"
        print_warning "- –î–æ–º–µ–Ω —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ IP: $server_ip" 
        print_warning "- DNS –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–∏–ª–∏—Å—å (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 24 —á–∞—Å–æ–≤)"
        echo
        
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å DNS? (y/N): " continue_anyway
        if [[ "$continue_anyway" != "y" && "$continue_anyway" != "Y" ]]; then
            print_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ DNS –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É."
            exit 1
        fi
        print_warning "‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ DNS –∑–∞–ø–∏—Å—è–º–∏"
        return 1
    fi
    
    print_info "IP –¥–æ–º–µ–Ω–∞ $domain: $domain_ip"
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º IP –∞–¥—Ä–µ—Å–∞
    if [[ "$server_ip" == "$domain_ip" ]]; then
        print_ok
        print_success "‚úÖ DNS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è $domain"
        return 0
    else
        print_fail
        print_error "‚ùå DNS –∑–∞–ø–∏—Å—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π IP!"
        print_error "   –î–æ–º–µ–Ω $domain ‚Üí $domain_ip"
        print_error "   –°–µ—Ä–≤–µ—Ä        ‚Üí $server_ip"
        print_warning ""
        print_warning "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ:"
        print_warning "1. –ò–∑–º–µ–Ω–∏—Ç—å A –∑–∞–ø–∏—Å—å –¥–ª—è $domain –Ω–∞ IP: $server_ip"
        print_warning "2. –î–æ–∂–¥–∞—Ç—å—Å—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è DNS (–¥–æ 24 —á–∞—Å–æ–≤)"
        print_warning "3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É DNS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"
        echo
        
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ DNS –∑–∞–ø–∏—Å—è–º–∏? (y/N): " continue_anyway
        if [[ "$continue_anyway" != "y" && "$continue_anyway" != "Y" ]]; then
            print_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ò—Å–ø—Ä–∞–≤—å—Ç–µ DNS –∑–∞–ø–∏—Å–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É."
            exit 1
        fi
        print_warning "‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É. SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å!"
        return 1
    fi
}

setup_domains() {
    clear
    echo
    colorized_echo cyan "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    colorized_echo cyan "                    –ù–ê–°–¢–†–û–ô–ö–ê –î–û–ú–ï–ù–û–í"
    colorized_echo cyan "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo
    
    if [ "$UPDATE_MODE" = true ]; then
        print_info "–†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –¥–æ–º–µ–Ω—ã –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è"
        return
    fi
    
    while true; do
        read -p "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, panel.example.com): " PANEL_DOMAIN
        if [[ -n "$PANEL_DOMAIN" && "$PANEL_DOMAIN" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞ –ø–∞–Ω–µ–ª–∏
            echo
            check_domain_dns "$PANEL_DOMAIN" "–ø–∞–Ω–µ–ª–∏"
            echo
            break
        else
            print_error "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω"
        fi
    done
    
    while true; do
        read -p "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, sub.example.com, –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ–º–µ–Ω–∞ –ø–∞–Ω–µ–ª–∏): " SUBSCRIPTION_DOMAIN
        if [[ -z "$SUBSCRIPTION_DOMAIN" ]]; then
            SUBSCRIPTION_DOMAIN="$PANEL_DOMAIN"
            print_info "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–æ–º–µ–Ω –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫: $SUBSCRIPTION_DOMAIN"
            break
        elif [[ "$SUBSCRIPTION_DOMAIN" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø–∞–Ω–µ–ª–∏)
            if [[ "$SUBSCRIPTION_DOMAIN" != "$PANEL_DOMAIN" ]]; then
                echo
                check_domain_dns "$SUBSCRIPTION_DOMAIN" "–ø–æ–¥–ø–∏—Å–æ–∫"
                echo
            fi
            break
        else
            print_error "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º"
        fi
    done
    
    log_action "–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–æ–º–µ–Ω—ã: –ø–∞–Ω–µ–ª—å=$PANEL_DOMAIN, –ø–æ–¥–ø–∏—Å–∫–∏=$SUBSCRIPTION_DOMAIN"
}

setup_dashboard_path() {
    clear
    echo
    colorized_echo cyan "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    colorized_echo cyan "                  –ù–ê–°–¢–†–û–ô–ö–ê –ü–£–¢–ò –ü–ê–ù–ï–õ–ò"
    colorized_echo cyan "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo
    
    if [ "$UPDATE_MODE" = true ]; then
        print_info "–†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - –ø—É—Ç—å –ø–∞–Ω–µ–ª–∏ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è"
        return
    fi
    
    colorized_echo yellow "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    echo
    colorized_echo white "–¢–µ–∫—É—â–∏–π URL: https://$PANEL_DOMAIN/dashboard/"
    colorized_echo white "–ù–æ–≤—ã–π URL –±—É–¥–µ—Ç: https://$PANEL_DOMAIN/{–≤–∞—à_–ø—É—Ç—å}/"
    echo
    colorized_echo cyan "–ü—Ä–∏–º–µ—Ä—ã –ø—É—Ç–µ–π:"
    colorized_echo white "  admin     ‚Üí https://$PANEL_DOMAIN/admin/"
    colorized_echo white "  panel     ‚Üí https://$PANEL_DOMAIN/panel/"
    colorized_echo white "  manage    ‚Üí https://$PANEL_DOMAIN/manage/"
    colorized_echo white "  dashboard ‚Üí https://$PANEL_DOMAIN/dashboard/ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo
    
    while true; do
        read -p "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è –ø–∞–Ω–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'admin'): " user_path
        user_path=${user_path:-admin}
        
        # –û—á–∏—Å—Ç–∫–∞ –ø—É—Ç–∏ –æ—Ç —Å–ª–µ—à–µ–π –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
        user_path=$(echo "$user_path" | sed 's|^/||; s|/$||')
        
        if [[ -n "$user_path" && "$user_path" =~ ^[a-zA-Z0-9_-]+$ ]]; then
            DASHBOARD_PATH="/$user_path/"
            echo
            colorized_echo green "‚úÖ –ü—É—Ç—å –∫ –ø–∞–Ω–µ–ª–∏: $DASHBOARD_PATH"
            colorized_echo white "   –ü–æ–ª–Ω—ã–π URL: https://$PANEL_DOMAIN$DASHBOARD_PATH"
            echo
            
            read -p "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç—Ç–æ—Ç –ø—É—Ç—å? (Y/n): " confirm
            confirm=${confirm:-Y}
            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                break
            fi
        else
            print_error "–ü—É—Ç—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è"
        fi
    done
    
    log_action "–ù–∞—Å—Ç—Ä–æ–µ–Ω –ø—É—Ç—å –ø–∞–Ω–µ–ª–∏: $DASHBOARD_PATH"
}

setup_admin_credentials() {
    clear
    echo
    colorized_echo cyan "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    colorized_echo cyan "                –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê"
    colorized_echo cyan "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo
    
    if [ "$UPDATE_MODE" = true ]; then
        print_info "–†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è - —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è"
        return
    fi
    
    while true; do
        read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin): " SUDO_USERNAME
        SUDO_USERNAME=${SUDO_USERNAME:-admin}
        if [[ "$SUDO_USERNAME" =~ ^[a-zA-Z0-9_]{3,20}$ ]]; then
            break
        else
            print_error "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3-20 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ)"
        fi
    done
    
    while true; do
        read -s -p "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: admin, –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤): " SUDO_PASSWORD
        echo
        SUDO_PASSWORD=${SUDO_PASSWORD:-admin}
        if [[ ${#SUDO_PASSWORD} -ge 8 ]] || [[ "$SUDO_PASSWORD" == "admin" ]]; then
            if [[ "$SUDO_PASSWORD" != "admin" ]]; then
                read -s -p "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: " SUDO_PASSWORD_CONFIRM
                echo
                if [[ "$SUDO_PASSWORD" == "$SUDO_PASSWORD_CONFIRM" ]]; then
                    break
                else
                    print_error "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
                fi
            else
                colorized_echo yellow "‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å 'admin' –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                break
            fi
        else
            print_error "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤"
        fi
    done
    
    log_action "–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: $SUDO_USERNAME"
}

# ===============================================================================
# –£–°–¢–ê–ù–û–í–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ===============================================================================

create_directories() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
    
    mkdir -p "$APP_DIR"
    mkdir -p "$DATA_DIR"
    mkdir -p "$DATA_DIR/configs"
    mkdir -p "$DATA_DIR/logs"
    mkdir -p "$DATA_DIR/xray-cores"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    if [ "$PRODUCTION_MODE" = true ]; then
        mkdir -p "$DATA_DIR/ssl"
        mkdir -p "$DATA_DIR/logs/security"
        chmod 700 "$DATA_DIR/ssl"
    fi
    
    print_ok
}

clone_repository() {
    print_step "–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ WildosVPN"
    
    if [ -d "$APP_DIR/.git" ]; then
        cd "$APP_DIR"
        git fetch origin
        git reset --hard origin/$REPO_BRANCH
    else
        rm -rf "$APP_DIR"
        git clone -b "$REPO_BRANCH" "$REPO_URL" "$APP_DIR"
    fi
    
    cd "$APP_DIR"
    
    print_ok
}

fix_nodes_startup_issue() {
    print_step "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø—É—Å–∫–æ–º —É–∑–ª–æ–≤"
    
    # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è nodes_startup.py
    local nodes_startup_file="$APP_DIR/app/utils/nodes_startup.py"
    
    if [ -f "$nodes_startup_file" ]; then
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        cp "$nodes_startup_file" "${nodes_startup_file}.backup"
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        cat > "$nodes_startup_file" << 'EOF'
"""
Fixed nodes_startup module for WildosVPN
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –∑–∞–ø—É—Å–∫–∞ —É–∑–ª–æ–≤
"""
import asyncio
import logging
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)

async def start_nodes() -> bool:
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —É–∑–ª–æ–≤"""
    try:
        from app.db import GetDB, crud
        from app.models.node import NodeStatus
        
        with GetDB() as db:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–∑–ª–æ–≤
            nodes = crud.get_nodes(db)
            
            for node in nodes:
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É–∑–ª—É
                    await connect_node(node)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–∑–ª–∞
                    crud.update_node_status(
                        db=db,
                        node_id=node.id,
                        status=NodeStatus.healthy,
                        message="Node started successfully"
                    )
                    
                    logger.info(f"Node {node.name} started successfully")
                    
                except Exception as e:
                    logger.error(f"Failed to start node {node.name}: {e}")
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–∑–ª–∞ –∫–∞–∫ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ–≥–æ
                    crud.update_node_status(
                        db=db,
                        node_id=node.id,
                        status=NodeStatus.unhealthy,
                        message=f"Startup failed: {str(e)}"
                    )
            
            return True
            
    except Exception as e:
        logger.error(f"Failed to start nodes: {e}")
        return False

async def connect_node(node) -> bool:
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —É–∑–ª—É"""
    try:
        # –ò–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        from app.wildosnode import grpclib
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —É–∑–ª–æ–º
        connection = await grpclib.get_node_connection(node)
        
        if connection:
            logger.info(f"Successfully connected to node {node.name}")
            return True
        else:
            logger.warning(f"Failed to connect to node {node.name}")
            return False
            
    except Exception as e:
        logger.error(f"Error connecting to node {node.name}: {e}")
        return False

def initialize_nodes():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–∑–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        import threading
        thread = threading.Thread(target=_start_nodes_thread)
        thread.daemon = True
        thread.start()
        
    except Exception as e:
        logger.error(f"Failed to initialize nodes: {e}")

def _start_nodes_thread():
    """–ó–∞–ø—É—Å–∫ —É–∑–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –ó–∞–ø—É—Å–∫ —É–∑–ª–æ–≤
        loop.run_until_complete(start_nodes())
        
    except Exception as e:
        logger.error(f"Error in nodes startup thread: {e}")
    finally:
        try:
            loop.close()
        except:
            pass
EOF
        
        print_ok
        log_action "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–ø—É—Å–∫–æ–º —É–∑–ª–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞"
    else
        print_warning "–§–∞–π–ª nodes_startup.py –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    fi
}

# ===============================================================================
# –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–û–ù–ù–´–• –§–ê–ô–õ–û–í
# ===============================================================================

create_dockerfile() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ Dockerfile"
    
    cat > "$APP_DIR/Dockerfile" << EOF
FROM python:3.11-slim

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \\
    curl \\
    unzip \\
    gnupg \\
    lsb-release \\
    libssl-dev \\
    libffi-dev \\
    libpq-dev \\
    gcc \\
    g++ \\
    make \\
    pkg-config \\
    python3-dev \\
    libxml2-dev \\
    libxslt1-dev \\
    zlib1g-dev \\
    libjpeg-dev \\
    libfreetype6-dev \\
    liblcms2-dev \\
    libwebp-dev \\
    tcl8.6-dev \\
    tk8.6-dev \\
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
RUN pip install --upgrade pip

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
COPY requirements.txt ./

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
RUN sed -i 's/v2share>=0.1.0/v2share==0.1.0b31/g' requirements.txt && \
    sed -i 's/grpclib/grpclib>=0.4.0/g' requirements.txt && \
    pip install --no-cache-dir -r requirements.txt || \
    (echo "Attempting alternative installation..." && \
     pip install --no-cache-dir --force-reinstall bcrypt==4.0.1 && \
     pip install --no-cache-dir --ignore-installed PyYAML==6.0.1 && \
     pip install --no-cache-dir -r requirements.txt)

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å bcrypt –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ alembic
RUN pip install --no-deps bcrypt==4.0.1 passlib==1.7.4 && \
    pip install alembic

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
COPY . .

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
RUN groupadd -r wildosvpn && useradd -r -g wildosvpn wildosvpn

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –ª–æ–≥–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
RUN mkdir -p /var/lib/wildosvpn/logs /var/lib/wildosvpn/configs /var/lib/wildosvpn/ssl && \
    chown -R wildosvpn:wildosvpn /var/lib/wildosvpn && \
    chmod -R 755 /var/lib/wildosvpn

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
RUN chown -R wildosvpn:wildosvpn /app

# –≠–∫—Å–ø–æ—Ä—Ç –ø–æ—Ä—Ç–æ–≤
EXPOSE 8000

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–µ–ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER wildosvpn

# –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞
CMD ["python", "main.py"]
EOF
    
    print_ok
}

create_docker_compose() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ Docker Compose —Ñ–∞–π–ª–∞"
    
    cat > "$APP_DIR/docker-compose.yml" << EOF
services:
  wildosvpn-panel:
    build: .
    container_name: wildosvpn-panel
    restart: unless-stopped
    network_mode: host
    environment:
      - PYTHONUNBUFFERED=1
      - PRODUCTION_MODE=$PRODUCTION_MODE
    env_file:
      - $DATA_DIR/.env
    volumes:
      - $DATA_DIR:/var/lib/wildosvpn
    command: ["sh", "-c", "chown -R wildosvpn:wildosvpn /var/lib/wildosvpn && su wildosvpn -c 'alembic upgrade head && python main.py'"]
    user: root
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/system/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  caddy:
    image: caddy:2-alpine
    container_name: wildosvpn-caddy
    restart: unless-stopped
    network_mode: host
    volumes:
      - $APP_DIR/Caddyfile:/etc/caddy/Caddyfile:ro
      - $DATA_DIR/caddy:/data
      - $DATA_DIR/ssl:$DATA_DIR/ssl:ro
    depends_on:
      - wildosvpn-panel
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
EOF
    
    print_ok
}

create_caddyfile() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ Caddyfile —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Let's Encrypt"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º email –¥–ª—è Let's Encrypt
    local ssl_email="admin@${PANEL_DOMAIN}"
    
    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    local global_config=""
    if [ "$PRODUCTION_MODE" = true ]; then
        global_config="{
    admin off
    email $ssl_email
}"
    else
        global_config="{
    admin off
}"
    fi
    
    cat > "$APP_DIR/Caddyfile" << EOF
$global_config

$PANEL_DOMAIN {
    # –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è tls - Caddy –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    
    reverse_proxy localhost:8000 {
        header_up Host {host}
        header_up X-Real-IP {remote}
        header_up X-Forwarded-For {remote}
        header_up X-Forwarded-Proto {scheme}
    }
    
    log {
        output file $DATA_DIR/logs/access.log {
            roll_size 10mb
            roll_keep 10
        }
    }
}
EOF

    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –¥–ª—è –¥–æ–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
    if [ "$SUBSCRIPTION_DOMAIN" != "$PANEL_DOMAIN" ]; then
        cat >> "$APP_DIR/Caddyfile" << EOF

$SUBSCRIPTION_DOMAIN {
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –¥–æ–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    
    reverse_proxy localhost:8000 {
        header_up Host {host}
        header_up X-Real-IP {remote}
        header_up X-Forwarded-For {remote}
        header_up X-Forwarded-Proto {scheme}
    }
    
    log {
        output file $DATA_DIR/logs/sub_access.log {
            roll_size 10mb
            roll_keep 10
        }
    }
}
EOF
    fi
    
    print_ok
    log_action "Caddyfile —Å–æ–∑–¥–∞–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"
}

create_env_file() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    
    local env_file="$DATA_DIR/.env"
    
    if [ "$UPDATE_MODE" = true ] && [[ -f "$env_file.backup" ]]; then
        print_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
        source "$env_file.backup"
    fi
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
    jwt_secret=$(openssl rand -hex 32 2>/dev/null || tr -dc A-Za-z0-9 </dev/urandom | head -c 64)
    
    cat > "$env_file" << EOF
# WildosVPN Configuration
# Generated on: $(date)

# Database
SQLALCHEMY_DATABASE_URL=sqlite:////var/lib/wildosvpn/wildosvpn.db

# JWT Configuration
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=1440
WILDOSVPN_SECRET_KEY=$jwt_secret

# Panel Configuration
PANEL_DOMAIN=$PANEL_DOMAIN
SUBSCRIPTION_DOMAIN=$SUBSCRIPTION_DOMAIN
DASHBOARD_PATH=$DASHBOARD_PATH

# SSL settings
SSL_CERT_FILE="/var/lib/wildosvpn/ssl/panel.cert"
SSL_KEY_FILE="/var/lib/wildosvpn/ssl/panel.key"
SSL_CA_FILE="/var/lib/wildosvpn/ssl/ca.cert"

# Admin Configuration
SUDO_USERNAME=$SUDO_USERNAME
SUDO_PASSWORD=$SUDO_PASSWORD

# Production Mode Settings
PRODUCTION_MODE=$PRODUCTION_MODE
ENABLE_SSL_CERTIFICATES=$ENABLE_SSL_CERTIFICATES
ENABLE_NODE_AUTHENTICATION=$ENABLE_NODE_AUTHENTICATION
ENABLE_SECURITY_MONITORING=$ENABLE_SECURITY_MONITORING

# Security Configuration
SECURITY_LOG_DIR=/var/lib/wildosvpn/logs/security
NODE_AUTH_SECRET_FILE=/var/lib/wildosvpn/node_auth_secret.key

# Application Settings
DOCS_URL=
REDOC_URL=
DEBUG=false
UVICORN_HOST=0.0.0.0
UVICORN_PORT=8000

# Logging
LOG_LEVEL=INFO
LOG_FORMAT=json
EOF
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    if [ "$PRODUCTION_MODE" = true ]; then
        cat >> "$env_file" << EOF

# Production Security Settings
CERTIFICATE_MANAGER_ENABLED=true
SECURITY_LOGGER_ENABLED=true
FAIL2BAN_ENABLED=true
FIREWALL_ENABLED=true

# SSL/TLS Configuration  
SSL_VERIFY_MODE=CERT_REQUIRED
SSL_CHECK_HOSTNAME=true
SSL_CIPHERS=ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS

# Rate Limiting
RATE_LIMIT_PER_MINUTE=60
BRUTE_FORCE_THRESHOLD=5
LOCKOUT_DURATION_MINUTES=60

# Monitoring
HEALTH_CHECK_ENABLED=true
METRICS_ENABLED=true
AUDIT_LOG_ENABLED=true
EOF
    fi
    
    chmod 600 "$env_file"
    print_ok
}

generate_certificates() {
    # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è Caddy
    if [ "$ENABLE_SSL_CERTIFICATES" = true ]; then
        print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è Caddy"
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è SSL —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        mkdir -p "$DATA_DIR/ssl"
        chmod 700 "$DATA_DIR/ssl"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ø–∞–Ω–µ–ª–∏ (—Å–æ–∑–¥–∞–Ω–Ω—ã—Ö setup_ssl_certificates)
        if [ ! -f "$DATA_DIR/ssl/panel.cert" ] || [ ! -f "$DATA_DIR/ssl/panel.key" ]; then
            print_warning "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∏—Ö"
            
            # –°–æ–∑–¥–∞–µ–º CA –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if [ ! -f "$DATA_DIR/ssl/ca.key" ]; then
                openssl genrsa -out "$DATA_DIR/ssl/ca.key" 4096 2>/dev/null
                openssl req -new -x509 -days 3650 -key "$DATA_DIR/ssl/ca.key" \
                    -out "$DATA_DIR/ssl/ca.cert" \
                    -subj "/C=US/ST=State/L=City/O=WildosVPN/CN=WildosVPN-CA" 2>/dev/null
            fi
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–∞–Ω–µ–ª–∏
            openssl genrsa -out "$DATA_DIR/ssl/panel.key" 2048 2>/dev/null
            openssl req -new -key "$DATA_DIR/ssl/panel.key" \
                -out "$DATA_DIR/ssl/panel.csr" \
                -subj "/C=US/ST=State/L=City/O=WildosVPN/CN=$PANEL_DOMAIN" 2>/dev/null
            
            openssl x509 -req -in "$DATA_DIR/ssl/panel.csr" \
                -CA "$DATA_DIR/ssl/ca.cert" -CAkey "$DATA_DIR/ssl/ca.key" \
                -CAcreateserial -out "$DATA_DIR/ssl/panel.cert" \
                -days 365 2>/dev/null
            
            rm -f "$DATA_DIR/ssl/panel.csr"
        fi
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Caddy
        chown -R 999:999 "$DATA_DIR/ssl"
        chmod 600 "$DATA_DIR/ssl"/*.key 2>/dev/null || true
        chmod 644 "$DATA_DIR/ssl"/*.cert 2>/dev/null || true
        
        print_ok
        log_action "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è Caddy (UID/GID: 999)"
    else
        print_info "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è"
    fi
}

# ===============================================================================
# –ó–ê–ü–£–°–ö –ò –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø
# ===============================================================================

build_and_start() {
    print_step "–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    
    cd "$APP_DIR"
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    docker compose down 2>/dev/null || true
    
    # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
    docker compose build --no-cache
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    docker compose up -d
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if ! docker compose ps | grep -q "Up"; then
        print_fail
        error_exit "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    fi
    
    # –ò–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print_step "–ò–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∞–±–ª–∏—Ü (4 √ó 15 —Å–µ–∫—É–Ω–¥)
    print_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π..."
    local check_interval=15
    local max_checks=4
    local check_number=1
    local database_ready=false
    
    while [ $check_number -le $max_checks ]; do
        print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î ($check_number/$max_checks) - –æ–∂–∏–¥–∞–Ω–∏–µ $check_interval —Å–µ–∫..."
        sleep $check_interval
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ë–î –ò —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        if docker compose exec -T wildosvpn-panel python -c "
import sys
sys.path.append('/app')
try:
    from app.db import GetDB
    from sqlalchemy import text
    
    with GetDB() as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        db.execute(text('SELECT 1'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        result = db.execute(text(\"SELECT name FROM sqlite_master WHERE type='table' AND name IN ('users', 'nodes', 'inbounds')\"))
        tables = [row[0] for row in result.fetchall()]
        
        if len(tables) >= 2:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            print('Database and tables ready')
            exit(0)
        else:
            print(f'Tables not ready yet. Found: {tables}')
            exit(1)
            
except Exception as e:
    print(f'Database not ready: {e}')
    exit(1)
" 2>/dev/null; then
            print_info "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ"
            database_ready=true
            break
        else
            print_warning "‚è≥ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –∏–¥—É—Ç –º–∏–≥—Ä–∞—Ü–∏–∏)..."
        fi
        
        ((check_number++))
    done
    
    if [ "$database_ready" = false ]; then
        print_fail
        print_error "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ 60 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è"
        print_error "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω"
        print_warning "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
        print_warning "- –ú–∏–≥—Ä–∞—Ü–∏–∏ Alembic –∑–∞–Ω–∏–º–∞—é—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏"
        print_warning "- –û—à–∏–±–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        print_warning "- –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ SQLite —Ñ–∞–π–ª—É"
        print_warning ""
        print_warning "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker compose logs wildosvpn-panel"
        print_warning "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–º–ø–æ—Ä—Ç –≤—Ä—É—á–Ω—É—é: docker compose exec wildosvpn-panel python wildosvpn-cli.py admin import-from-env --yes"
        log_action "ERROR: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è, –∏–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–ø—É—â–µ–Ω"
        return
    fi
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã–ø–æ–ª–Ω—è–µ–º import-from-env –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞ –≤ –ë–î
    print_info "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..."
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    print_info "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º:"
    print_info "   - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: wildosvpn-panel"
    print_info "   - Username: $SUDO_USERNAME"
    print_info "   - Password: [${#SUDO_PASSWORD} —Å–∏–º–≤–æ–ª–æ–≤]"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    print_info "üìã –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
    docker compose ps wildosvpn-panel || print_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    print_info "üåç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:"
    docker compose exec -T wildosvpn-panel env | grep -E "SUDO_USERNAME|SUDO_PASSWORD" || print_warning "‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SUDO –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ!"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CLI —Å–∫—Ä–∏–ø—Ç–∞
    print_info "üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ CLI —Å–∫—Ä–∏–ø—Ç–∞:"
    docker compose exec -T wildosvpn-panel ls -la wildosvpn-cli.py || print_warning "‚ùå CLI —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    print_info "üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞:"
    print_info "   - –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: $DATA_DIR/.env"
    if [ -f "$DATA_DIR/.env" ]; then
        local env_size=$(stat -c%s "$DATA_DIR/.env" 2>/dev/null || echo "0")
        print_info "   - –†–∞–∑–º–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ .env: $env_size –±–∞–π—Ç"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è SUDO –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        print_info "   - SUDO –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º .env:"
        grep -E "SUDO_USERNAME|SUDO_PASSWORD" "$DATA_DIR/.env" || print_warning "   ‚ùå SUDO –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ .env"
    else
        print_warning "   ‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    print_info "   - .env –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ:"
    docker compose exec -T wildosvpn-panel ls -la /var/lib/wildosvpn/.env || print_warning "   ‚ùå .env –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
    
    # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç —Å –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–æ–∫
    if docker compose exec -T wildosvpn-panel python wildosvpn-cli.py admin import-from-env --yes; then
        print_ok
        log_action "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
    else
        local exit_code=$?
        print_warning "–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞ (–∫–æ–¥: $exit_code), –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã"
        
        # –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
        if docker compose exec -T wildosvpn-panel bash -c "
export SUDO_USERNAME='$SUDO_USERNAME'
export SUDO_PASSWORD='$SUDO_PASSWORD'
python wildosvpn-cli.py admin import-from-env --yes
"; then
            print_ok
            log_action "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –ø—Ä—è–º—É—é –ø–µ—Ä–µ–¥–∞—á—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"
        else
            # –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ Python –º–æ–¥—É–ª—å
            if docker compose exec -T wildosvpn-panel python -c "
import sys
sys.path.append('/app')
import os
os.environ['SUDO_USERNAME'] = '$SUDO_USERNAME'
os.environ['SUDO_PASSWORD'] = '$SUDO_PASSWORD'
from cli.admin import import_from_env
import typer
ctx = typer.Context(typer.Typer())
import_from_env(yes_to_all=True)
print('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Python')
"; then
                print_ok
                log_action "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Python –º–æ–¥—É–ª—å"
            else
                print_fail
                print_error "–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—É–¥–∞—á–Ω—ã!"
                print_warning "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker compose logs wildosvpn-panel"
                print_warning "–ò–º–ø–æ—Ä—Ç –≤—Ä—É—á–Ω—É—é: docker compose exec wildosvpn-panel python wildosvpn-cli.py admin import-from-env --yes"
                log_action "ERROR: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —É–¥–∞–ª—Å—è"
            fi
        fi
    fi
    
    print_ok
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
get_admin_token() {
    local admin_token=""
    
    print_info "üîë –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å API —Å–µ—Ä–≤–µ—Ä–∞
    local api_ready=false
    local attempts=0
    local max_attempts=10
    
    print_info "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–µ—Ä–∞..."
    while [ $attempts -lt $max_attempts ]; do
        if curl -s --connect-timeout 3 --max-time 5 "http://localhost:8000/api/system/health" >/dev/null 2>&1; then
            api_ready=true
            print_info "‚úÖ API —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤"
            break
        fi
        sleep 2
        ((attempts++))
        echo -n "."
    done
    echo
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ API –≥–æ—Ç–æ–≤)
    if [ "$api_ready" = true ] && command -v curl >/dev/null 2>&1; then
        print_info "üåê –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ API..."
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ endpoints
        for endpoint in "/api/admins/token" "/api/admin/token" "/api/auth/login" "/api/token"; do
            admin_token=$(curl -s -X POST "http://localhost:8000$endpoint" \
                -H "Content-Type: application/x-www-form-urlencoded" \
                -d "username=$SUDO_USERNAME&password=$SUDO_PASSWORD" \
                2>/dev/null | jq -r '.access_token // .token // .access_token' 2>/dev/null)
            
            if [[ "$admin_token" != "null" && -n "$admin_token" && "$admin_token" =~ ^[A-Za-z0-9._-]+\.[A-Za-z0-9._-]+\.[A-Za-z0-9._-]+$ ]]; then
                print_info "‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ API ($endpoint)"
                echo "$admin_token"
                return 0
            fi
        done
        print_warning "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API"
    else
        print_warning "‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ HTTP"
    fi
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ API, –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ CLI
    print_info "üîß –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ CLI..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å CLI –∫–æ–º–∞–Ω–¥—ã
    if docker compose exec -T wildosvpn-panel python wildosvpn-cli.py admin --help >/dev/null 2>&1; then
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JWT —Ç–æ–∫–µ–Ω–∞
        admin_token=$(docker compose exec -T wildosvpn-panel python wildosvpn-cli.py admin create-token "$SUDO_USERNAME" 2>/dev/null | \
                     grep -oE '[A-Za-z0-9._-]{20,}\.[A-Za-z0-9._-]{20,}\.[A-Za-z0-9._-]{20,}' | head -1)
        
        if [[ -n "$admin_token" && "$admin_token" =~ ^[A-Za-z0-9._-]+\.[A-Za-z0-9._-]+\.[A-Za-z0-9._-]+$ ]]; then
            print_info "‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ CLI"
            echo "$admin_token"
            return 0
        else
            print_warning "‚ùå CLI –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω"
        fi
    else
        print_warning "‚ùå CLI –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
    
    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Python –º–æ–¥—É–ª—è
    print_info "üêç –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Python –º–æ–¥—É–ª—å..."
    admin_token=$(docker compose exec -T wildosvpn-panel python -c "
import sys
sys.path.append('/app')
try:
    from app.auth import create_access_token
    from app.db import GetDB, crud
    
    with GetDB() as db:
        admin = crud.get_admin(db, username='$SUDO_USERNAME')
        if admin:
            token = create_access_token({'sub': admin.username, 'is_sudo': admin.is_sudo})
            print(token)
        else:
            print('Admin not found')
except Exception as e:
    print(f'Error: {e}')
" 2>/dev/null | grep -oE '[A-Za-z0-9._-]{20,}\.[A-Za-z0-9._-]{20,}\.[A-Za-z0-9._-]{20,}' | head -1)
    
    if [[ -n "$admin_token" && "$admin_token" =~ ^[A-Za-z0-9._-]+\.[A-Za-z0-9._-]+\.[A-Za-z0-9._-]+$ ]]; then
        print_info "‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Python –º–æ–¥—É–ª—å"
        echo "$admin_token"
        return 0
    fi
    
    print_warning "‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–µ—É–¥–∞—á–Ω—ã"
    echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω"
    return 1
}

run_security_migrations() {
    if [ "$PRODUCTION_MODE" != true ]; then
        return
    fi
    
    print_step "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    sleep 10
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ Docker
    if docker compose ps | grep -q wildosvpn-panel; then
        docker compose exec -T wildosvpn-panel python -c "
from app.db import engine
from app.db.models import Base
Base.metadata.create_all(bind=engine)
print('Security migrations applied successfully')
" 2>/dev/null || {
            print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
            log_action "WARNING: –ú–∏–≥—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
        }
    fi
    
    print_ok
    log_action "–ú–∏–≥—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
}

install_cli() {
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"
    
    cat > /usr/local/bin/wildosvpn << EOF
#!/bin/bash
cd "$APP_DIR"

case "\$1" in
    start)
        docker compose up -d
        ;;
    stop)
        docker compose down
        ;;
    restart)
        docker compose restart
        ;;
    status)
        docker compose ps
        ;;
    logs)
        docker compose logs -f \${2:-}
        ;;
    update)
        curl -sSL https://raw.githubusercontent.com/wildos-dev/WildosVPN/main/install.sh | bash -s update
        ;;
    health)
        curl -s http://localhost:8000/health || echo "Service unavailable"
        ;;
    backup)
        tar -czf "/tmp/wildosvpn-backup-\$(date +%Y%m%d-%H%M%S).tar.gz" -C "$DATA_DIR" .
        echo "Backup created in /tmp/"
        ;;
    *)
        echo "Usage: wildosvpn {start|stop|restart|status|logs|update|health|backup}"
        exit 1
        ;;
esac
EOF
    
    chmod +x /usr/local/bin/wildosvpn
    print_ok
}

# ===============================================================================
# –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò –ó–ê–í–ï–†–®–ï–ù–ò–ï
# ===============================================================================

show_final_info() {
    clear
    echo
    colorized_echo green "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    if [ "$UPDATE_MODE" = true ]; then
        colorized_echo green "                  ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
    else
        colorized_echo green "                  ‚úÖ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!"
    fi
    colorized_echo green "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo
    
    if [ "$UPDATE_MODE" != true ]; then
        colorized_echo cyan "üåê URL –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        colorized_echo white "   https://$PANEL_DOMAIN$DASHBOARD_PATH"
        echo
        colorized_echo cyan "üîê –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:"
        colorized_echo white "   –õ–æ–≥–∏–Ω: $SUDO_USERNAME"
        colorized_echo white "   –ü–∞—Ä–æ–ª—å: $SUDO_PASSWORD"
        echo
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        colorized_echo cyan "üîë –¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
        local admin_token=$(get_admin_token)
        if [[ "$admin_token" != "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω" ]]; then
            colorized_echo white "   $admin_token"
            colorized_echo yellow "   ‚ö†Ô∏è  –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤"
        else
            colorized_echo yellow "   –¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å"
        fi
        echo
    fi
    
    colorized_echo cyan "üìÅ –í–∞–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
    colorized_echo white "   –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: $APP_DIR"
    colorized_echo white "   –î–∞–Ω–Ω—ã–µ: $DATA_DIR"
    colorized_echo white "   –õ–æ–≥–∏: $LOG_FILE"
    if [ "$PRODUCTION_MODE" = true ]; then
        colorized_echo white "   SSL: $DATA_DIR/ssl"
        colorized_echo white "   –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: $DATA_DIR/logs/security"
    fi
    echo
    
    colorized_echo cyan "üõ†Ô∏è  –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π:"
    colorized_echo white "   wildosvpn start|stop|restart"
    colorized_echo white "   wildosvpn status - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    colorized_echo white "   wildosvpn logs - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    colorized_echo white "   wildosvpn update - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
    colorized_echo white "   wildosvpn health - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
    colorized_echo white "   wildosvpn backup - —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
    echo
    
    if [ "$PRODUCTION_MODE" = true ]; then
        colorized_echo cyan "üîí –§—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:"
        colorized_echo green "   ‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        colorized_echo green "   ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É–∑–ª–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞"
        colorized_echo green "   ‚úÖ Firewall –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        colorized_echo green "   ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–µ–Ω"
        colorized_echo green "   ‚úÖ Fail2ban –∑–∞—â–∏—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞"
        echo
    fi
    
    if [ "$UPDATE_MODE" != true ]; then
        colorized_echo yellow "üìù –í–∞–∂–Ω–æ:"
        colorized_echo white "   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–º–µ–Ω—ã —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä"
        colorized_echo white "   ‚Ä¢ –ü–æ—Ä—Ç—ã 80 –∏ 443 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã"
        if [ "$PRODUCTION_MODE" = true ]; then
            colorized_echo white "   ‚Ä¢ –ü—Ä–æ–¥–∞–∫—à–µ–Ω SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        else
            colorized_echo white "   ‚Ä¢ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        fi
        echo
        
        colorized_echo red "üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:"
        colorized_echo yellow "   ‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–º–µ–Ω–∏—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å 'admin'"
        colorized_echo yellow "   ‚ö†Ô∏è  –ó–∞–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        colorized_echo yellow "   ‚ö†Ô∏è  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        echo
    fi
    
    colorized_echo cyan "üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:"
    colorized_echo white "   wildosvpn status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
    colorized_echo white "   wildosvpn logs - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏"
    if [ "$PRODUCTION_MODE" = true ]; then
        colorized_echo white "   fail2ban-client status - —Å—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã"
    fi
    echo
}

# ===============================================================================
# –ì–õ–ê–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –£–°–¢–ê–ù–û–í–ö–ò
# ===============================================================================

install_wildosvpn() {
    log_action "–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ WildosVPN v$SCRIPT_VERSION"
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_root
    detect_os
    detect_arch
    check_network
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    setup_deployment_mode
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    setup_domains
    setup_dashboard_path
    setup_admin_credentials
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    install_dependencies
    install_docker
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    create_directories
    clone_repository
    fix_nodes_startup_issue
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
    # setup_ssl_certificates  # –û—Ç–∫–ª—é—á–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    setup_node_authentication
    setup_security_monitoring
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    create_dockerfile
    create_docker_compose
    create_caddyfile
    create_env_file
    # generate_certificates  # –û—Ç–∫–ª—é—á–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º Let's Encrypt
    
    # –ó–∞–ø—É—Å–∫
    build_and_start
    run_security_migrations
    install_cli
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    show_final_info
    log_action "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ WildosVPN –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
}

update_wildosvpn() {
    if [[ ! -d "$APP_DIR" ]]; then
        error_exit "WildosVPN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É."
    fi
    
    UPDATE_MODE=true
    log_action "–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è WildosVPN"
    
    check_root
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if [[ -f "$DATA_DIR/.env" ]]; then
        cp "$DATA_DIR/.env" "$DATA_DIR/.env.backup"
        source "$DATA_DIR/.env"
    fi
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    cd "$APP_DIR"
    docker compose down
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
    clone_repository
    fix_nodes_startup_issue
    
    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    create_dockerfile
    create_docker_compose
    create_caddyfile
    create_env_file
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º
    if [[ "$PRODUCTION_MODE" == "true" ]]; then
        # setup_ssl_certificates  # –û—Ç–∫–ª—é—á–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        setup_security_monitoring
    fi
    
    # –ó–∞–ø—É—Å–∫
    build_and_start
    run_security_migrations
    install_cli
    
    show_final_info
    log_action "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ WildosVPN –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
}

uninstall_wildosvpn() {
    echo
    colorized_echo red "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ WildosVPN!"
    echo
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (yes/no): " confirm
    
    if [[ "$confirm" != "yes" ]]; then
        colorized_echo yellow "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        return
    fi
    
    print_step "–£–¥–∞–ª–µ–Ω–∏–µ WildosVPN"
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if [[ -f "$APP_DIR/docker-compose.yml" ]]; then
        cd "$APP_DIR"
        docker compose down -v 2>/dev/null || true
    fi
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
    docker rmi $(docker images "wildosvpn*" -q) 2>/dev/null || true
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    rm -rf "$APP_DIR"
    rm -rf "$DATA_DIR"
    rm -f "/usr/local/bin/wildosvpn"
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    rm -f /etc/fail2ban/jail.d/wildosvpn.conf
    rm -f /etc/fail2ban/filter.d/wildosvpn-auth.conf
    rm -f /etc/logrotate.d/wildosvpn-security
    
    print_ok
    colorized_echo green "WildosVPN –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω"
}

show_status() {
    if [[ ! -d "$APP_DIR" ]]; then
        colorized_echo red "WildosVPN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return
    fi
    
    echo
    colorized_echo cyan "=== –°—Ç–∞—Ç—É—Å WildosVPN ==="
    echo
    
    cd "$APP_DIR"
    if docker compose ps 2>/dev/null; then
        echo
        colorized_echo cyan "=== –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ ==="
        docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}" \
            wildosvpn-panel wildosvpn-caddy 2>/dev/null || colorized_echo yellow "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        
        echo
        colorized_echo cyan "=== –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ==="
        if command -v fail2ban-client >/dev/null 2>&1; then
            fail2ban-client status 2>/dev/null || colorized_echo yellow "fail2ban –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
        
        if command -v ufw >/dev/null 2>&1; then
            ufw status numbered 2>/dev/null || colorized_echo yellow "ufw –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    else
        colorized_echo red "–°–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
    fi
}

show_logs() {
    if [[ ! -d "$APP_DIR" ]]; then
        colorized_echo red "WildosVPN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return
    fi
    
    echo
    colorized_echo cyan "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –¥–ª—è:"
    colorized_echo white "1) –ü–∞–Ω–µ–ª—å"
    colorized_echo white "2) Caddy"
    colorized_echo white "3) –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    colorized_echo white "4) –õ–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    echo
    
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ (1-4): " log_choice
    
    cd "$APP_DIR"
    case $log_choice in
        1) docker compose logs -f wildosvpn-panel;;
        2) docker compose logs -f caddy;;
        3) docker compose logs -f;;
        4) 
            if [[ -d "$DATA_DIR/logs/security" ]]; then
                tail -f "$DATA_DIR/logs/security"/*.log
            else
                colorized_echo yellow "–õ–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
            fi
            ;;
        *) colorized_echo red "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä";;
    esac
}

# ===============================================================================
# –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
# ===============================================================================

show_menu() {
    clear
    echo
    colorized_echo cyan "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    colorized_echo cyan "              WildosVPN Installer v$SCRIPT_VERSION"
    colorized_echo cyan "                Production Security Edition"
    colorized_echo cyan "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo
    colorized_echo blue "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    echo
    colorized_echo white "1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WildosVPN"
    colorized_echo white "2) –û–±–Ω–æ–≤–∏—Ç—å WildosVPN"
    colorized_echo white "3) –£–¥–∞–ª–∏—Ç—å WildosVPN"
    colorized_echo white "4) –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"
    colorized_echo white "5) –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    colorized_echo white "6) –í—ã—Ö–æ–¥"
    echo
    
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-6): " choice
    
    case $choice in
        1) install_wildosvpn;;
        2) update_wildosvpn;;
        3) uninstall_wildosvpn;;
        4) show_status;;
        5) show_logs;;
        6) exit 0;;
        *) colorized_echo red "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"; sleep 2; show_menu;;
    esac
}

# ===============================================================================
# –¢–û–ß–ö–ê –í–•–û–î–ê
# ===============================================================================

main() {
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    case "${1:-}" in
        "install") install_wildosvpn;;
        "update") update_wildosvpn;;
        "uninstall") uninstall_wildosvpn;;
        *) show_menu;;
    esac
}

main "$@"