#!/usr/bin/env python3
"""
WildosNode CLI - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–æ–π WildosVPN
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import os
import sys
import subprocess
import json
import argparse
import time
from pathlib import Path
from datetime import datetime
import shutil

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
NODE_DIR = "/var/lib/wildosnode"
COMPOSE_FILE = "/opt/wildosvpn/docker-compose.node.yml"
BACKUP_DIR = "/var/backups/wildosnode"
LOG_FILE = f"{NODE_DIR}/logs/wildosnode-cli.log"

class Colors:
    """ANSI —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã"""
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

def colored_print(text, color=Colors.WHITE):
    """–¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"""
    print(f"{color}{text}{Colors.END}")

def log_action(message):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π"""
    os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, "a") as f:
        f.write(f"[{timestamp}] {message}\n")
    colored_print(f"[{timestamp}] {message}", Colors.BLUE)

def run_command(command, capture_output=True):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if capture_output:
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            return result.returncode == 0, result.stdout, result.stderr
        else:
            result = subprocess.run(command, shell=True)
            return result.returncode == 0, "", ""
    except Exception as e:
        return False, "", str(e)

def check_docker():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker"""
    success, _, _ = run_command("docker --version")
    if not success:
        colored_print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–¥–æ–π.", Colors.RED)
        sys.exit(1)

def get_container_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–æ–¥—ã"""
    success, output, _ = run_command("docker compose -f /opt/wildosvpn/docker-compose.node.yml ps --format json")
    if success and output.strip():
        try:
            containers = []
            for line in output.strip().split('\n'):
                if line.strip():
                    containers.append(json.loads(line))
            return containers
        except json.JSONDecodeError:
            return []
    return []

def start_node():
    """–ó–∞–ø—É—Å–∫ –Ω–æ–¥—ã"""
    colored_print("üöÄ –ó–∞–ø—É—Å–∫ WildosNode...", Colors.CYAN)
    
    if not os.path.exists(COMPOSE_FILE):
        colored_print("‚ùå Docker Compose —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–Ω–∞—á–∞–ª–∞.", Colors.RED)
        return False
    
    success, output, error = run_command(f"docker compose -f {COMPOSE_FILE} up -d")
    
    if success:
        colored_print("‚úÖ WildosNode —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω", Colors.GREEN)
        log_action("WildosNode –∑–∞–ø—É—â–µ–Ω")
        return True
    else:
        colored_print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {error}", Colors.RED)
        return False

def stop_node():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã"""
    colored_print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ WildosNode...", Colors.CYAN)
    
    success, output, error = run_command(f"docker compose -f {COMPOSE_FILE} down")
    
    if success:
        colored_print("‚úÖ WildosNode –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", Colors.GREEN)
        log_action("WildosNode –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    else:
        colored_print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {error}", Colors.RED)
        return False

def restart_node():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–æ–¥—ã"""
    colored_print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ WildosNode...", Colors.CYAN)
    
    success, output, error = run_command(f"docker compose -f {COMPOSE_FILE} restart")
    
    if success:
        colored_print("‚úÖ WildosNode –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω", Colors.GREEN)
        log_action("WildosNode –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        return True
    else:
        colored_print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {error}", Colors.RED)
        return False

def show_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–æ–¥—ã"""
    colored_print("üìä –°—Ç–∞—Ç—É—Å WildosNode:", Colors.CYAN)
    print()
    
    containers = get_container_status()
    
    if not containers:
        colored_print("‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã", Colors.RED)
        return
    
    for container in containers:
        name = container.get('Name', 'unknown')
        state = container.get('State', 'unknown')
        status = container.get('Status', 'unknown')
        
        if state.lower() == 'running':
            colored_print(f"  ‚úÖ {name}: {status}", Colors.GREEN)
        else:
            colored_print(f"  ‚ùå {name}: {status}", Colors.RED)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    print()
    colored_print("üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:", Colors.CYAN)
    
    # –î–∏—Å–∫
    if os.path.exists(NODE_DIR):
        disk_usage = shutil.disk_usage(NODE_DIR)
        used_percent = (disk_usage.used / disk_usage.total) * 100
        
        if used_percent < 80:
            color = Colors.GREEN
            icon = "‚úÖ"
        elif used_percent < 90:
            color = Colors.YELLOW
            icon = "‚ö†Ô∏è"
        else:
            color = Colors.RED
            icon = "‚ùå"
        
        colored_print(f"  {icon} –î–∏—Å–∫: {used_percent:.1f}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ", color)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
    if os.path.exists(f"{NODE_DIR}/logs"):
        log_files = list(Path(f"{NODE_DIR}/logs").glob("*.log"))
        colored_print(f"  üìÑ –§–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: {len(log_files)}", Colors.WHITE)

def show_logs(follow=False, lines=50):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –Ω–æ–¥—ã"""
    colored_print(f"üìã –õ–æ–≥–∏ WildosNode (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {lines} —Å—Ç—Ä–æ–∫):", Colors.CYAN)
    
    command = f"docker compose -f {COMPOSE_FILE} logs --tail {lines}"
    if follow:
        command += " -f"
        colored_print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞", Colors.YELLOW)
    
    run_command(command, capture_output=False)

def create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–æ–¥—ã"""
    if not os.path.exists(NODE_DIR):
        colored_print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", Colors.RED)
        return False
    
    os.makedirs(BACKUP_DIR, exist_ok=True)
    
    backup_name = f"wildosnode-backup-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
    backup_path = f"{BACKUP_DIR}/{backup_name}.tar.gz"
    
    colored_print(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_name}", Colors.CYAN)
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
    success, output, error = run_command(f"tar -czf {backup_path} -C {NODE_DIR} .")
    
    if success:
        size = os.path.getsize(backup_path) / (1024 * 1024)  # MB
        colored_print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path} ({size:.1f} MB)", Colors.GREEN)
        log_action(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
        return True
    else:
        colored_print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {error}", Colors.RED)
        return False

def restore_backup(backup_file):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    if not os.path.exists(backup_file):
        colored_print(f"‚ùå –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_file}", Colors.RED)
        return False
    
    colored_print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_file}", Colors.CYAN)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–¥—É
    stop_node()
    
    # –û—á–∏—â–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if os.path.exists(NODE_DIR):
        shutil.rmtree(NODE_DIR)
    
    os.makedirs(NODE_DIR, exist_ok=True)
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –∞—Ä—Ö–∏–≤–∞
    success, output, error = run_command(f"tar -xzf {backup_file} -C {NODE_DIR}")
    
    if success:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        run_command(f"chown -R 1000:1000 {NODE_DIR}")
        
        colored_print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", Colors.GREEN)
        log_action(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {os.path.basename(backup_file)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–¥—É
        start_node()
        return True
    else:
        colored_print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {error}", Colors.RED)
        return False

def list_backups():
    """–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    if not os.path.exists(BACKUP_DIR):
        colored_print("üìÅ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", Colors.YELLOW)
        return
    
    backups = list(Path(BACKUP_DIR).glob("wildosnode-backup-*.tar.gz"))
    
    if not backups:
        colored_print("üìÅ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", Colors.YELLOW)
        return
    
    colored_print("üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:", Colors.CYAN)
    print()
    
    for backup in sorted(backups, reverse=True):
        size = backup.stat().st_size / (1024 * 1024)  # MB
        mtime = datetime.fromtimestamp(backup.stat().st_mtime)
        colored_print(f"  üìÑ {backup.name} ({size:.1f} MB, {mtime.strftime('%Y-%m-%d %H:%M')})", Colors.WHITE)

def update_node():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã"""
    colored_print("üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ WildosNode...", Colors.CYAN)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    if not create_backup():
        colored_print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", Colors.RED)
        return False
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
    success, output, error = run_command("bash /opt/wildosvpn/wildosvpn.sh --mode=update")
    
    if success:
        colored_print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", Colors.GREEN)
        log_action("WildosNode –æ–±–Ω–æ–≤–ª–µ–Ω")
        return True
    else:
        colored_print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {error}", Colors.RED)
        return False

def regenerate_certificates():
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
    colored_print("üîê –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...", Colors.CYAN)
    
    success, output, error = run_command("bash /opt/wildosvpn/wildosvpn.sh --generate-certs")
    
    if success:
        colored_print("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã", Colors.GREEN)
        log_action("SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–¥—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        restart_node()
        return True
    else:
        colored_print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {error}", Colors.RED)
        return False

def cleanup_logs():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
    colored_print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤...", Colors.CYAN)
    
    log_dir = f"{NODE_DIR}/logs"
    if not os.path.exists(log_dir):
        colored_print("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", Colors.YELLOW)
        return
    
    # –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
    success, output, error = run_command(f"find {log_dir} -name '*.log' -mtime +30 -delete")
    
    if success:
        colored_print("‚úÖ –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã", Colors.GREEN)
        log_action("–û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏")
    else:
        colored_print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {error}", Colors.RED)

def show_config():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–æ–¥—ã"""
    colored_print("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WildosNode:", Colors.CYAN)
    print()
    
    config_files = [
        ("Xray Config", f"{NODE_DIR}/xray_config.json"),
        ("Server Certificate", f"{NODE_DIR}/server.cert"),
        ("Client Certificate", f"{NODE_DIR}/client.pem"),
        ("Server Key", f"{NODE_DIR}/server.key")
    ]
    
    for name, path in config_files:
        if os.path.exists(path):
            size = os.path.getsize(path)
            mtime = datetime.fromtimestamp(os.path.getmtime(path))
            colored_print(f"  ‚úÖ {name}: {os.path.basename(path)} ({size} bytes, {mtime.strftime('%Y-%m-%d %H:%M')})", Colors.GREEN)
        else:
            colored_print(f"  ‚ùå {name}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="WildosNode CLI - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–æ–π WildosVPN",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  wildosnode start                    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É
  wildosnode status                   # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
  wildosnode logs -f                  # –°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏
  wildosnode backup                   # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  wildosnode restore backup.tar.gz    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ–ø–∏–∏
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    subparsers.add_parser('start', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É')
    subparsers.add_parser('stop', help='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É')
    subparsers.add_parser('restart', help='–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É')
    subparsers.add_parser('status', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–æ–¥—ã')
    
    # –õ–æ–≥–∏
    logs_parser = subparsers.add_parser('logs', help='–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏')
    logs_parser.add_argument('-f', '--follow', action='store_true', help='–°–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏')
    logs_parser.add_argument('-n', '--lines', type=int, default=50, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)')
    
    # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    subparsers.add_parser('backup', help='–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é')
    restore_parser = subparsers.add_parser('restore', help='–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏')
    restore_parser.add_argument('backup_file', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏')
    subparsers.add_parser('list-backups', help='–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π')
    
    # –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
    subparsers.add_parser('update', help='–û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É')
    subparsers.add_parser('cleanup', help='–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏')
    subparsers.add_parser('regen-certs', help='–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã')
    subparsers.add_parser('config', help='–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–æ–¥—ã')
    
    args = parser.parse_args()
    
    if not args.command:
        colored_print("üîß WildosNode v1.0.0", Colors.BOLD + Colors.CYAN)
        print()
        parser.print_help()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∫–æ–º–∞–Ω–¥
    if args.command not in ['list-backups', 'config']:
        check_docker()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if args.command == 'start':
        start_node()
    elif args.command == 'stop':
        stop_node()
    elif args.command == 'restart':
        restart_node()
    elif args.command == 'status':
        show_status()
    elif args.command == 'logs':
        show_logs(follow=args.follow, lines=args.lines)
    elif args.command == 'backup':
        create_backup()
    elif args.command == 'restore':
        restore_backup(args.backup_file)
    elif args.command == 'list-backups':
        list_backups()
    elif args.command == 'update':
        update_node()
    elif args.command == 'cleanup':
        cleanup_logs()
    elif args.command == 'regen-certs':
        regenerate_certificates()
    elif args.command == 'config':
        show_config()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        colored_print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã", Colors.YELLOW)
        sys.exit(0)
    except Exception as e:
        colored_print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", Colors.RED)
        sys.exit(1)